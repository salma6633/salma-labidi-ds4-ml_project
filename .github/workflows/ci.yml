name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
          xpack.security.enabled: "false"
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install xgboost lifelines pytest black mypy

    - name: Configure MLflow directory
      run: |
        mkdir -p mlruns
        chmod 755 mlruns

    - name: Run linter (Black)
      run: |
        source venv/bin/activate
        black --check .

    - name: Run static type checking (Mypy)
      run: |
        source venv/bin/activate
        mypy --ignore-missing-imports --exclude venv .

    - name: Run unit tests
      env:
        ELASTICSEARCH_HOST: localhost
        MLFLOW_TRACKING_URI: file://${{ github.workspace }}/mlruns
      run: |
        source venv/bin/activate
        pytest --maxfail=1 --disable-warnings -v

    - name: Prepare data
      env:
        ELASTICSEARCH_HOST: localhost
      run: |
        source venv/bin/activate
        python main.py --step prepare --data data_churn.csv

    - name: Train model
      env:
        ELASTICSEARCH_HOST: localhost
        MLFLOW_TRACKING_URI: file://${{ github.workspace }}/mlruns
      run: |
        source venv/bin/activate
        python main.py --step train

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/salma_labidi_4ds4_mlops:${{ github.sha }} .

    - name: Push to Docker Hub
      run: |
        echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/salma_labidi_4ds4_mlops:${{ github.sha }}
