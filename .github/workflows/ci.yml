name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 1️⃣ Setup Environment (Install dependencies)
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install xgboost lifelines  # Installer des paquets spécifiques
          make -f Makefile setup  # Assurez-vous que setup est bien une cible dans Makefile

  # 2️⃣ Lint & Format (Vérification du code)
  lint-format:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Activate virtual environment
        run: |
          . venv/bin/activate  # Activer l'environnement virtuel
          make lint  # Exécuter la règle lint définie dans le Makefile

      - name: Formatting check with black
        run: |
          . venv/bin/activate  # Activer l'environnement virtuel
          make format  # Exécuter la règle format définie dans le Makefile

  # 3️⃣ Préparation des données & Entraînement du modèle
  data-train:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Activate virtual environment
        run: |
          . venv/bin/activate  # Activer l'environnement virtuel
          make data  # Exécuter la règle data définie dans le Makefile

      - name: Entraîner le modèle
        run: |
          . venv/bin/activate  # Activer l'environnement virtuel
          make train  # Exécuter la règle train définie dans le Makefile

  # 4️⃣ Tests Unitaires
  tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Activate virtual environment
        run: |
          . venv/bin/activate  # Activer l'environnement virtuel
          make test  # Exécuter la règle test définie dans le Makefile

  # 5️⃣ Construction & Push de l'Image Docker
  docker:
    needs: [tests, data-train]
    runs-on: ubuntu-latest
    steps:
      - name: Activate virtual environment
        run: |
          . venv/bin/activate  # Activer l'environnement virtuel
          make build-docker  # Exécuter la règle build-docker définie dans le Makefile

      - name: Push Docker image to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
          make push-docker  # Exécuter la règle push-docker définie dans le Makefile

  # 6️⃣ Notification par Email
  notification:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "CI/CD Pipeline Status - ${{ job.status }}"
          body: "Le pipeline GitHub Actions est terminé avec le statut : ${{ job.status }}"
          to: "tonemail@example.com"
          from: "github-actions@example.com"
