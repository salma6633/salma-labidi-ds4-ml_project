name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MLFLOW_TRACKING_URI: "http://localhost:5000"  # Use local MLflow server
  MLFLOW_ARTIFACTS_DESTINATION: "./mlruns"      # Relative path for artifacts
  ELASTICSEARCH_HOST: "localhost"

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
          xpack.security.enabled: "false"
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache Python dependencies
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install xgboost lifelines pytest black mypy joblib mlflow scikit-learn elasticsearch

      - name: Create MLflow artifact directory
        run: |
          mkdir -p $MLFLOW_ARTIFACTS_DESTINATION
          chmod 777 $MLFLOW_ARTIFACTS_DESTINATION

      - name: Debug artifact directory
        run: |
          echo "MLflow artifact directory: $MLFLOW_ARTIFACTS_DESTINATION"
          ls -ld $MLFLOW_ARTIFACTS_DESTINATION
          touch $MLFLOW_ARTIFACTS_DESTINATION/testfile
          rm $MLFLOW_ARTIFACTS_DESTINATION/testfile

      - name: Start MLflow server
        run: |
          source venv/bin/activate
          mlflow ui --host 0.0.0.0 --port 5000 &
          sleep 10  # Wait for the server to start

      - name: Run all steps
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
          ELASTICSEARCH_HOST: ${{ env.ELASTICSEARCH_HOST }}
        run: |
          source venv/bin/activate
          python main.py --run-all --data data_churn.csv

      - name: Debug MLflow directory
        run: |
          echo "Contenu du r√©pertoire mlruns :"
          ls -l $MLFLOW_ARTIFACTS_DESTINATION

      - name: Stop MLflow server
        run: |
          pkill -f "mlflow ui" || true  # Stop the MLflow server
