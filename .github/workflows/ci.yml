name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MLFLOW_TRACKING_URI: "http://localhost:5000"
  ELASTICSEARCH_HOST: "localhost"

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
          xpack.security.enabled: "false"
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install xgboost lifelines pytest black mypy joblib mlflow scikit-learn elasticsearch
      - name: Clean MLflow directory
        run: |
          rm -rf mlruns/*
          mkdir -p mlruns
          chmod 755 mlruns
      - name: Check MLflow directory
        run: |
          ls -l mlruns
      - name: Check Elasticsearch connection
        run: |
          curl -X GET "http://localhost:9200"
      - name: Create mlflow-metrics index
        run: |
          curl -X PUT "http://localhost:9200/mlflow-metrics"
      - name: Start MLflow server
        run: |
          source venv/bin/activate
          mlflow ui --host 0.0.0.0 --port 5000 &
          sleep 10  # Wait for the server to start
      - name: Check MLflow server status
        run: |
          curl -I http://localhost:5000
      - name: Run linter (Black)
        run: |
          source venv/bin/activate
          black .
      - name: Run static type checking (Mypy)
        run: |
          source venv/bin/activate
          mypy --ignore-missing-imports --exclude venv .
      - name: Run unit tests
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
        run: |
          source venv/bin/activate
          pytest --maxfail=1 --disable-warnings -v
      - name: Set MLflow experiment to ExperimentFinal
        run: |
          source venv/bin/activate
          mlflow experiments create --experiment-name ExperimentFinal || true
      - name: Run all steps
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
          ELASTICSEARCH_HOST: ${{ env.ELASTICSEARCH_HOST }}
        run: |
          source venv/bin/activate
          python main.py --run-all --data data_churn.csv
      - name: Debug MLflow directory
        run: |
          echo "Contenu du répertoire mlruns :"
          ls -l mlruns
          echo "Contenu du répertoire mlruns/models :"
          ls -l mlruns/models
          echo "Contenu du répertoire mlruns/models/CustomerChurnModel :"
          ls -l mlruns/models/CustomerChurnModel
      - name: Check MLflow meta.yaml
        run: |
          cat mlruns/models/CustomerChurnModel/meta.yaml
      - name: Upload mlruns directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mlruns
          path: mlruns/
