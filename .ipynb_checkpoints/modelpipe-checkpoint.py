def run_pipeline(data_path):
    """
    Ex√©cute le pipeline complet et retourne les m√©triques d'√©valuation.
    """
    logger.info(Fore.CYAN + "=" * 80 + Style.RESET_ALL)
    logger.info(Fore.CYAN + "üöÄ D√©marrage du pipeline complet..." + Style.RESET_ALL)
    logger.info(Fore.CYAN + "=" * 80 + Style.RESET_ALL)

    # √âtape 1 : Pr√©paration des donn√©es
    logger.info(Fore.BLUE + "\n=== √âtape 1 : Pr√©paration des donn√©es ===" + Style.RESET_ALL)
    logger.info("Pr√©paration des donn√©es...")
    X_train, X_test, y_train, y_test = prepare_data(data_path)
    logger.info(Fore.GREEN + "‚úÖ Donn√©es pr√©par√©es avec succ√®s." + Style.RESET_ALL)

    # √âtape 2 : Entra√Ænement du mod√®le
    logger.info(Fore.BLUE + "\n=== √âtape 2 : Entra√Ænement du mod√®le ===" + Style.RESET_ALL)
    logger.info("Entra√Ænement du mod√®le...")
    model = train_model(X_train, y_train)
    logger.info(Fore.GREEN + "‚úÖ Mod√®le entra√Æn√© avec succ√®s." + Style.RESET_ALL)

    # √âtape 3 : √âvaluation du mod√®le
    logger.info(Fore.BLUE + "\n=== √âtape 3 : √âvaluation du mod√®le ===" + Style.RESET_ALL)
    logger.info("√âvaluation du mod√®le...")
    metrics = evaluate_model(model, X_test, y_test)
    logger.info(Fore.YELLOW + "üìä M√©triques d'√©valuation :" + Style.RESET_ALL)
    logger.info(Fore.YELLOW + f"+-------------------+-------------------+" + Style.RESET_ALL)
    logger.info(Fore.YELLOW + f"| M√©trique          | Valeur            |" + Style.RESET_ALL)
    logger.info(Fore.YELLOW + f"+-------------------+-------------------+" + Style.RESET_ALL)
    logger.info(Fore.YELLOW + f"| Accuracy          | {metrics['accuracy']:.4f}            |" + Style.RESET_ALL)
    logger.info(Fore.YELLOW + f"| ROC AUC Score     | {metrics['roc_auc_score']:.4f}            |" + Style.RESET_ALL)
    logger.info(Fore.YELLOW + f"+-------------------+-------------------+" + Style.RESET_ALL)
    logger.info(Fore.YELLOW + "üìù Rapport de classification :" + Style.RESET_ALL)
    logger.info(Fore.YELLOW + metrics['classification_report'] + Style.RESET_ALL)
    logger.info(Fore.GREEN + "‚úÖ √âvaluation termin√©e." + Style.RESET_ALL)

    # √âtape 4 : Sauvegarde du mod√®le
    logger.info(Fore.BLUE + "\n=== √âtape 4 : Sauvegarde du mod√®le ===" + Style.RESET_ALL)
    logger.info("Sauvegarde du mod√®le...")
    save_model(model, "customer_churn_model.pkl")
    logger.info(Fore.GREEN + "‚úÖ Mod√®le sauvegard√© avec succ√®s." + Style.RESET_ALL)

    # √âtape 5 : Enregistrement du mod√®le dans MLflow
    logger.info(Fore.BLUE + "\n=== √âtape 5 : Enregistrement du mod√®le dans MLflow ===" + Style.RESET_ALL)
    logger.info("Enregistrement du mod√®le dans MLflow...")
    log_model_to_mlflow(model, X_train, X_test)
    logger.info(Fore.GREEN + "‚úÖ Mod√®le enregistr√© dans MLflow." + Style.RESET_ALL)

    # √âtape 6 : Envoi des m√©triques √† Elasticsearch
    logger.info(Fore.BLUE + "\n=== √âtape 6 : Envoi des m√©triques √† Elasticsearch ===" + Style.RESET_ALL)
    logger.info("Envoi des m√©triques √† Elasticsearch...")
    log_metrics_to_es(metrics)
    logger.info(Fore.GREEN + "‚úÖ M√©triques envoy√©es √† Elasticsearch." + Style.RESET_ALL)

    logger.info(Fore.CYAN + "=" * 80 + Style.RESET_ALL)
    logger.info(Fore.CYAN + "üéâ Pipeline termin√© avec succ√®s !" + Style.RESET_ALL)
    logger.info(Fore.CYAN + "=" * 80 + Style.RESET_ALL)

    return metrics